This is a collection of tools for development and testing of the Intel DRM
driver.  There are many macro-level test suites that get used against our
driver, including xtest, rendercheck, piglit, and oglconform, but failures
from those can be difficult to track down to kernel changes, and many require
complicated build procedures or specific testing environments to get useful
results.

Thus, intel-graphics-tools was a project I started to collect some low-level
tools I intended to build.

benchmarks/
	This should be a collection of useful microbenchmarks.  The hope is
	that people can use these to tune some pieces of DRM code in relevant
	ways.

	The benchmarks require KMS to be enabled.  When run with an X Server
	running, they must be run as root to avoid the authentication
	requirement.

	Note that a few other microbenchmarks are in tests (like gem_gtt_speed).

tests/
	This is a set of automated tests to run against the DRM to validate
	changes.  Hopefully this can cover the relevant cases we need to
	worry about, including backwards compatibility.

	After having compiled the tests, one can run the test-suite with:

	$ sudo make run-tests

	As we have display tests, we need to be DRM master. As a result the
	test suite can only be run if no other DRM client is active.
	Similarly, some tests access debugfs, so we need to be root.

	"make run-tests" create a $date-piglit-results.$n directory with the
	results of the run. More specifically:
	  - $date-piglit-results.$n/main JSON file with the test results
	  - $date-piglit-results.$n/html/index.html HTML summary of the run

	Where $date is the date formated with `date +%Y%m%d` and $n the nth run
	of the day.

	PIGLIT_FLAGS can be used to give options to the underlying piglit
	runner. For instance, to exclude test matching '^kms_':

	$ sudo make run-tests PIGLIT_FLAGS="-x ^kms_"

	For the list of piglit options, run:

	$ ./piglit/piglit-run.py -h

	Another useful feature is to be able to resume an interrupted run. To
	do that, make run-tests needs to know which run we are talking about:

	$ sudo make run-tests RESUME=$date-piglit-results.$n

	or, more succinctly:

	$ sudo make run-tests R=$date-piglit-results.$n

	It's possible to combine PIGLIT_FLAGS and RESUME. This is useful to
	resume runs where a specific test deterministically hang the machine:

	$ sudo make run-tests PIGLIT_FLAGS="-x drv_module_reload" R=$date-piglit-results.$n

	"make run-tests" only runs a default set of tests and is useful for
	regression testing. Other tests not run are:
	- tests that might hang the gpu, see HANG in tests/Makefile.sources
	- gem_stress, a stress test suite. Look at the source for all the
	  various options.
	- testdisplay is only run in the default mode. testdisplay has tons of
	  options to test different kms functionality, again read the source for
	  the details.

	When creating new tests or subtests please read and follow
	tests/NAMING-CONVENTION.

lib/
	Common helper functions and headers used by the other tools.

man/
	Manpages, unfortunately rather incomplete.

tools/
	This is a collection of debugging tools that had previously been
	built with the 2D driver but not shipped.  Some distros were hacking
	up the 2D build to ship them.  Instead, here's a separate package for
	people debugging the driver.

	These tools generally must be run as root, safe for the ones that just
	decode dumps.

tools/quick_dump
	Quick dumper is a python tool built with SWIG bindings to
	important libraries exported by the rest of the tool suite. The tool
	itself is quite straight forward, and should also be a useful example
	for others wishing to write python based i915 tools.

	Note to package maintainers: It is not recommended to package
	this directory, as the tool is not yet designed for wide usage. If the
	package is installed via "make install" the users will have to set
	their python library path appropriately. Use --disable-dumper

debugger/
	This tool is to be used to do shader debugging. It acts like a
	debug server accepting connections from debug clients such as
	mesa. The connections is made with unix domain sockets, and at some
	point it would be nice if this directory contained a library for
	initiating connections with debug clients..

	The debugger must be run as root: "sudo debugger/eudb"

DEPENDENCIES
	This is a non-exchaustive list of package dependencies required for
	building everything:

	libpciaccess-dev
	libdrm-dev
	xutils-dev
	libcairo2-dev
	swig2.0
	libpython3.3-dev
	x11proto-dri2-dev
